"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const follow_redirects_1 = require("follow-redirects");
const utils_1 = require("./lib/utils");
const request = (method, url, options) => new Promise((resolve, reject) => {
    const { hostname, pathname, port, protocol, search, searchParams } = new URL(url);
    const headers = (options === null || options === void 0 ? void 0 : options.headers) || {
        'Content-Type': 'application/json'
    };
    const chunks = [];
    const lib = (options === null || options === void 0 ? void 0 : options.secure) || protocol === 'https' ? follow_redirects_1.https : follow_redirects_1.http;
    const req = lib.request({
        protocol,
        hostname,
        port,
        path: pathname + search,
        method,
        headers,
        auth: options === null || options === void 0 ? void 0 : options.auth
    }, res => {
        res.on('data', chunk => chunks.push(chunk));
        res.on('end', () => {
            const statusCode = res.statusCode;
            const statusMessage = res.statusMessage;
            const method = res.method;
            const url = res.url;
            const headers = res.headers;
            const rawHeaders = res.rawHeaders;
            const socket = res.socket;
            const body = (headers['content-type'] === 'application/json')
                ? JSON.parse(Buffer.concat(chunks).toString())
                : Buffer.concat(chunks).toString();
            resolve({
                statusCode,
                statusMessage,
                method,
                url,
                headers,
                rawHeaders,
                socket,
                searchParams,
                body
            });
        });
    });
    req.on('error', reject);
    if (options === null || options === void 0 ? void 0 : options.body) {
        if (headers['Content-Type'] !== 'application/json') {
            req.write(options.body);
        }
        else {
            req.write((0, utils_1.safeStringify)(options === null || options === void 0 ? void 0 : options.body));
        }
    }
    req.end();
});
exports.default = request;
//# sourceMappingURL=index.js.map